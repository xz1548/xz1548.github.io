[{"id":"33178a053863ba406bb965eb7a776aab","title":"shellcode","content":"\n\nshellcode什么是shellcode软件漏洞利用过程中使用一小段机器代码\n启动shell进行交互\n可能存在的问题shellcode只允许输入十几个字节\n无法调用系统函数(不知道system的地址)\n解决触发中断（0x80或者syscall）\n如何编写shellcode32位;;nasm -f elf32 i386.asm\n;;ld -m elf_i386 -o i386 i386.o\n;;objdump -d i386\nglobal _start\n_start:\n\tpush &quot;&#x2F;sh&quot;\n\tpush &quot;&#x2F;bin&quot;\n\tmov ebx, esp;;ebx&#x3D;&#39;&#x2F;bin&#x2F;sh&#39;\n\txor edx, edx;;edx&#x3D;0\n\txor ecx, ecx;;ecx&#x3D;0\n\tmov al, 0xb;;设置al&#x3D;0xb\n\tint 0x80\n\n64位;;name -f elf64 x64.asm\n;;ld -m elf_x86 -o x64 x64.o\n;;objdump -d x64\nglobal _start\n_start:\n\tmov rbx, &#39;&#x2F;bin&#x2F;sh&#39;\n\tpush rbx\n\tpush rsp\n\tpop rdi\n\txor esi, esi\n\txor edx, edx\n\tpush 0x3b\n\tpop rax\n\tsyscall\n\npwntools快速生成shellcodefrom pwn import *\ncontext(log_level='debug',arch='i386',os='linux')\nshellcode=asm(shellcraft.sh())\n\n例题mrctf2020_shellcodeciscn_2019_s_9pwnable_orwshellcode的变形mrctf_shellcode_revengealpha3编码github.com/TaQini/alpha3.git\n","slug":"CTF/pwn/shellcode","date":"2022-01-18T04:55:28.000Z","categories_index":"CTF/PWN","tags_index":"CTF PWN","author_index":"S1eepy"},{"id":"b0e5183f9443ee80e444d03488f07c6f","title":"栈溢出基础","content":"\n\n栈溢出基础C语言函数调用栈栈是程序运行时一块连续的内存区域，用来保存函数运行时的状态信息，包括函数的局部变量等\n当发生函数调用时，调用函数(caller)的状态被保存在栈内，被调用函数(callee)的状态被压入调用栈的栈顶\n函数调用结束时栈顶的函数(callee)状态被弹出，栈顶恢复到调用函数(caller)的状态\n函数调用栈的内存中从高地址到低地址生长，所以栈顶内存地址在压栈时变小，退栈时变大\n寄存器\neip寄存器：下一条要被执行的指令，它所指向的指令\nesp寄存器：保存调用栈的栈顶地址\nebp寄存器：保存当前函数状态基地址\n\n函数调用过程先把参数压入栈\n然后将调用函数(caller)的下一条指令的地址作为被调用函数(callee)的返回地址压入栈中\n再将ebp的值压入栈，并将ebp寄存器的值更新为当前栈顶的地址，这样caller的ebp信息得以保存，同时ebp被更新为callee的基地址\n最后是将callee的局部变量等数据压入栈（栈溢出最经常出现的位置）\n\n函数调用结束恢复过程变化的核心任务是丢弃callee的状态，将栈顶恢复到caller的过程\n首先将局部变量从栈顶弹出，栈顶会恢复到callee的基地址\n然后caller的基地址从栈顶弹出，存到ebp内，这样caller的ebp信息得以恢复，此时栈顶指向返回地址\n再将返回地址从栈内弹出，存到eip寄存器内，这样caller的eip信息得以恢复\n栈溢出原理从上面可以看出，caller的eip完全是由返回地址控制的，只要想办法在写入局部变量时控制长度，写入到返回地址处，就能够让caller的eip调到其他地方，从而getshell\n\n\n\n\n\n\n\n\n\n缓冲区溢出：本质是向定长的缓冲区写入了超长的数据，从而导致数据覆盖了合法内存，包括栈溢出，堆溢出，data段溢出等\n栈溢出基本利用","slug":"CTF/pwn/栈溢出基础","date":"2022-01-18T04:54:11.000Z","categories_index":"CTF/PWN","tags_index":"CTF PWN","author_index":"S1eepy"},{"id":"a100591a1cf0e28185d19ee6ce40ac1f","title":"Learn_RE","content":"\n\nRE学习笔记记录一下寒假期间学习RE的知识\n","slug":"CTF/reverse/Learn_RE","date":"2022-01-18T04:52:25.000Z","categories_index":"CTF/REVERSE","tags_index":"CTF REVERSE","author_index":"S1eepy"},{"id":"0c0a9c1a2db47172b0f7b7bd30e860a1","title":"Learn_PWN","content":"PWN学习笔记记录一下放大三寒假期间学习PWN的知识\n","slug":"CTF/pwn/Learn_PWN","date":"2022-01-18T04:51:06.000Z","categories_index":"CTF/PWN","tags_index":"CTF PWN","author_index":"S1eepy"},{"id":"298a963bd623954dbff89574513140ea","title":"Learn_WEB","content":"\n\nWEB学习笔记由于之前的web笔记被火绒当病毒杀了，当时没救回来，于是乎就懒得再写一遍了，之后跟着更新就行应该\n","slug":"CTF/web/Learn_WEB","date":"2022-01-18T03:20:26.000Z","categories_index":"CTF/WEB","tags_index":"CTF WEB","author_index":"S1eepy"},{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new \"My New Post\"\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2022-01-18T01:13:55.638Z","categories_index":"","tags_index":"","author_index":"S1eepy"}]