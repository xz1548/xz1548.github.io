{"title":"RE-BUU","uid":"ce6a61e69eea25b26a44cdf9f84d23a7","slug":"CTF/reverse/RE-BUU","date":"2022-01-18T07:17:52.000Z","updated":"2022-01-19T10:36:34.156Z","comments":true,"path":"api/articles/CTF/reverse/RE-BUU.json","keywords":null,"cover":"/img/18.jpg","content":"<span id=\"more\"></span>\n\n<h1 id=\"BUUCTF-Reverse刷题记录\"><a href=\"#BUUCTF-Reverse刷题记录\" class=\"headerlink\" title=\"BUUCTF-Reverse刷题记录\"></a>BUUCTF-Reverse刷题记录</h1><h2 id=\"新年快乐\"><a href=\"#新年快乐\" class=\"headerlink\" title=\"新年快乐\"></a>新年快乐</h2><p>一个upx壳，怎么看出来的还不知道，等回头学会了再补</p>\n<p>直接upx -d去壳，扔进idaF5看代码就是比较输入字符串和”HappyNewYear!”，因此这个字符串就是flag</p>\n<h2 id=\"xor\"><a href=\"#xor\" class=\"headerlink\" title=\"xor\"></a>xor</h2><p>主函数是逻辑如下，遍历输入字符串，将当前位与前一位异或，最终得到新字符串，将新字符串与global字符串比较，因此global就是异或后的结果，将其倒过来重新异或一遍即可。</p>\n<p>在IDA里双击global找到结果字符串（直接看长度不太对，再点进去一次），就能找到global的值，exp如下，注意去掉最后的f（懒得写进去了）</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">s <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'f'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xa</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'k'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xc</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&amp;'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'O'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'@'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x11</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xd</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Z'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">';'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'U'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x11</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'p'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x19</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'F'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x1F</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'v'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\"'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'M'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'#'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xe</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'g'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'h'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xf</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'G'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'O'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nflag <span class=\"token operator\">=</span> <span class=\"token string\">'f'</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">33</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\ts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tflag <span class=\"token operator\">+=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> flag<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"helloworld\"><a href=\"#helloworld\" class=\"headerlink\" title=\"helloworld\"></a>helloworld</h2><p>直接APKIDE打开找到MainActivity.smali翻到flag</p>\n<h2 id=\"reverse3\"><a href=\"#reverse3\" class=\"headerlink\" title=\"reverse3\"></a>reverse3</h2><p>一道很简单的题目，关键是看出来v4是base64加密(受益于认真听s0uthwood师傅讲课让我一眼看了出来)，特征是一大堆移位异或，以及长为64的数组，还有和base64一样的table。</p>\n<p>最后根据逻辑直接反向写出脚本</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> base64 <span class=\"token keyword\">import</span> b64decode\nres <span class=\"token operator\">=</span> <span class=\"token string\">'e3nifIH9b_C@n@dH'</span>\ndest <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tdest <span class=\"token operator\">+=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">)</span>\nv4 <span class=\"token operator\">=</span> b64decode<span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>v4<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","feature":true,"text":" BUUCTF-Reverse刷题记录新年快乐一个upx壳，怎么看出来的还不知道，等回头学会了再补 直接upx -d去壳，扔进idaF5看代码就是比较输入字符串和”HappyNewYear!”，因此这个字符串就是flag xor主函数是逻辑如下，遍历输入字符串，将当前位与前一位异...","link":"","photos":[],"count_time":{"symbolsCount":979,"symbolsTime":"1 mins."},"categories":[{"name":"CTF/REVERSE","slug":"CTF-REVERSE","count":2,"path":"api/categories/CTF-REVERSE.json"}],"tags":[{"name":"CTF REVERSE","slug":"CTF-REVERSE","count":2,"path":"api/tags/CTF-REVERSE.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#BUUCTF-Reverse%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95\"><span class=\"toc-text\">BUUCTF-Reverse刷题记录</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90\"><span class=\"toc-text\">新年快乐</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#xor\"><span class=\"toc-text\">xor</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#helloworld\"><span class=\"toc-text\">helloworld</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#reverse3\"><span class=\"toc-text\">reverse3</span></a></li></ol></li></ol>","author":{"name":"S1eepy","slug":"blog-author","avatar":"/img/touxiang.jpg","link":"/","description":"Someone who is learning how to take life seriously","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"canary_pie绕过","uid":"5cbed18fc0178c7e2f7d933895162e2e","slug":"CTF/pwn/canary_pie绕过","date":"2022-01-18T11:53:50.000Z","updated":"2022-01-19T07:55:48.512Z","comments":true,"path":"api/articles/CTF/pwn/canary_pie绕过.json","keywords":null,"cover":"/img/22.jpg","text":" Canary_pie绕过Canary机制介绍canary是一种用来防护栈溢出的保护机制，原理是先在函数的入口处，从fs/gs寄存器中取出一个4字节或者8字节的值存到栈上，当程序结束后再检查这个值是否和存进去的值一致 Canary bypass只要保持canary值不变，依旧可以...","link":"","photos":[],"count_time":{"symbolsCount":928,"symbolsTime":"1 mins."},"categories":[{"name":"CTF/PWN","slug":"CTF-PWN","count":5,"path":"api/categories/CTF-PWN.json"}],"tags":[{"name":"CTF PWN","slug":"CTF-PWN","count":5,"path":"api/tags/CTF-PWN.json"}],"author":{"name":"S1eepy","slug":"blog-author","avatar":"/img/touxiang.jpg","link":"/","description":"Someone who is learning how to take life seriously","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"shellcode","uid":"33178a053863ba406bb965eb7a776aab","slug":"CTF/pwn/shellcode","date":"2022-01-18T04:55:28.000Z","updated":"2022-01-19T07:54:48.505Z","comments":true,"path":"api/articles/CTF/pwn/shellcode.json","keywords":null,"cover":"/img/20.jpg","text":" shellcode什么是shellcode软件漏洞利用过程中使用一小段机器代码 启动shell进行交互 可能存在的问题shellcode只允许输入十几个字节 无法调用系统函数(不知道system的地址) 解决触发中断（0x80或者syscall） 如何编写shellcode32...","link":"","photos":[],"count_time":{"symbolsCount":896,"symbolsTime":"1 mins."},"categories":[{"name":"CTF/PWN","slug":"CTF-PWN","count":5,"path":"api/categories/CTF-PWN.json"}],"tags":[{"name":"CTF PWN","slug":"CTF-PWN","count":5,"path":"api/tags/CTF-PWN.json"}],"author":{"name":"S1eepy","slug":"blog-author","avatar":"/img/touxiang.jpg","link":"/","description":"Someone who is learning how to take life seriously","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}