{"title":"数电基础","uid":"0162baa68121de3e2c10c96d5835ca7a","slug":"HWS/2022/数电基础","date":"2022-02-18T13:13:44.000Z","updated":"2022-02-18T13:17:38.410Z","comments":true,"path":"api/articles/HWS/2022/数电基础.json","keywords":null,"cover":"/img/6.jpg","content":"<span id=\"more\"></span>\n\n<h1 id=\"逻辑的代数表示\"><a href=\"#逻辑的代数表示\" class=\"headerlink\" title=\"逻辑的代数表示\"></a>逻辑的代数表示</h1><ul>\n<li>逻辑运算：与或非、异或、同或</li>\n<li>布尔表达式：包含布尔变量和布尔运算的</li>\n<li>布尔函数：布尔映射</li>\n<li>真值表：一张表把布尔函数的输入输出列出来</li>\n<li>基本定律：德摩根律、互补律、消去律、重叠、对偶（01互换，+*互换，等式成立）</li>\n<li>格雷码：使得相邻之间的状态转换只有一位数字翻转（为了减少翻转以减少能耗），如下例</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">0 0 0\n0 0 1\n0 1 1\n0 1 0\n1 1 0\n1 1 1\n1 0 1\n1 0 0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>卡诺图：用于化简逻辑设计，如下图，然后画圈化简（梦回数电）</li>\n</ul>\n<p><img src=\"/img/%E6%95%B0%E7%94%B5%E5%9F%BA%E7%A1%80_img/image-20220216180930212.png\" alt=\"image-20220216180930212\"></p>\n<p><img src=\"/img/%E6%95%B0%E7%94%B5%E5%9F%BA%E7%A1%80_img/image-20220216181134876.png\" alt=\"image-20220216181134876\"></p>\n<h1 id=\"组合逻辑\"><a href=\"#组合逻辑\" class=\"headerlink\" title=\"组合逻辑\"></a>组合逻辑</h1><ul>\n<li>门级电路</li>\n</ul>\n<p><img src=\"/img/%E6%95%B0%E7%94%B5%E5%9F%BA%E7%A1%80_img/image-20220216181521669.png\" alt=\"image-20220216181521669\"></p>\n<ul>\n<li>门级电路的物理实现：主流逻辑电路实现一般使用CMOS，MOS分为NMOS和PMOS</li>\n<li>NMOS：高电平闭合，低电平断开（两个端口为输入电压，如图GS为输入，DS为输出）</li>\n</ul>\n<p><img src=\"/img/%E6%95%B0%E7%94%B5%E5%9F%BA%E7%A1%80_img/image-20220216181920995.png\" alt=\"image-20220216181920995\"></p>\n<ul>\n<li>PMOS：和NMOS完全对偶</li>\n</ul>\n<p><img src=\"/img/%E6%95%B0%E7%94%B5%E5%9F%BA%E7%A1%80_img/image-20220216182133311.png\" alt=\"image-20220216182133311\"></p>\n<ul>\n<li>CMOS非门：把一个PMOS和一个NMOS串联到一起，两个D极结合到一起</li>\n<li>CMOS与非门：两个PMOS并联，两个NMOS串联，然后串联</li>\n<li>CMOS或非门：两个PMOS串联，两个NMOS并联，然后串联</li>\n</ul>\n<h2 id=\"组合电路中的延时与冒险\"><a href=\"#组合电路中的延时与冒险\" class=\"headerlink\" title=\"组合电路中的延时与冒险\"></a>组合电路中的延时与冒险</h2><ul>\n<li>Transition Time转换时间：状态转换需要时间</li>\n<li>Propagation Delay延时：从输入发生变化到相应的输出变化发生所用的时间（低-&gt;高中点和高-&gt;低中点的差值）</li>\n<li>Glitch毛刺：</li>\n</ul>\n<p><img src=\"/img/%E6%95%B0%E7%94%B5%E5%9F%BA%E7%A1%80_img/image-20220216183744571.png\" alt=\"image-20220216183744571\"></p>\n<h2 id=\"常见的组合逻辑电路\"><a href=\"#常见的组合逻辑电路\" class=\"headerlink\" title=\"常见的组合逻辑电路\"></a>常见的组合逻辑电路</h2><ul>\n<li>编码器：如one-hot编码</li>\n<li>多路选择器Mux：逻辑函数一般都是通过Mux实现</li>\n<li>半加器：不考虑进位的加法器（例如异或）</li>\n<li>全加器：考虑进位的加法器</li>\n<li>多位加法器：把全加器串行即可，可以采用并行加快速度</li>\n</ul>\n<h1 id=\"时序逻辑\"><a href=\"#时序逻辑\" class=\"headerlink\" title=\"时序逻辑\"></a>时序逻辑</h1><h2 id=\"有限状态机\"><a href=\"#有限状态机\" class=\"headerlink\" title=\"有限状态机\"></a>有限状态机</h2><ul>\n<li>时钟：</li>\n<li>时钟信号：存在转换时间，不是理想方波</li>\n<li>时钟信号的产生：环形振荡器</li>\n</ul>\n<h2 id=\"基本时序单元结构\"><a href=\"#基本时序单元结构\" class=\"headerlink\" title=\"基本时序单元结构\"></a>基本时序单元结构</h2><ul>\n<li>SR锁存器：R为reset，S为set，若R为1、S为0，则输出Q为0；若R为0，S为1，则输出Q为1。若R和S均为0，则Q+保持之前Q的状态，；若R和S均为1，则Q+和Q’+均为0。注意RS均为1时可能会出现死锁不稳定</li>\n</ul>\n<p><img src=\"/img/%E6%95%B0%E7%94%B5%E5%9F%BA%E7%A1%80_img/image-20220216190141260.png\" alt=\"image-20220216190141260\"></p>\n<ul>\n<li>门控D锁存器</li>\n</ul>\n<p><img src=\"/img/%E6%95%B0%E7%94%B5%E5%9F%BA%E7%A1%80_img/image-20220216191009167.png\" alt=\"image-20220216191009167\"></p>\n<ul>\n<li>触发器Flip-Flop：输出只取决于上升沿和下降沿时的状态</li>\n</ul>\n<p><img src=\"/img/%E6%95%B0%E7%94%B5%E5%9F%BA%E7%A1%80_img/image-20220216191558569.png\" alt=\"image-20220216191558569\"></p>\n<ul>\n<li>四种逻辑功能的触发器：D、SR、JK、T</li>\n</ul>\n<h2 id=\"典型的时序逻辑电路\"><a href=\"#典型的时序逻辑电路\" class=\"headerlink\" title=\"典型的时序逻辑电路\"></a>典型的时序逻辑电路</h2><ul>\n<li>移位寄存器：串行输入、串行（并行）输出</li>\n</ul>\n<p><img src=\"/img/%E6%95%B0%E7%94%B5%E5%9F%BA%E7%A1%80_img/image-20220216192924161.png\" alt=\"image-20220216192924161\"></p>\n<h1 id=\"Verilog和FPGA基础\"><a href=\"#Verilog和FPGA基础\" class=\"headerlink\" title=\"Verilog和FPGA基础\"></a>Verilog和FPGA基础</h1><h2 id=\"常见硬件\"><a href=\"#常见硬件\" class=\"headerlink\" title=\"常见硬件\"></a>常见硬件</h2><ul>\n<li>CPU：通用，运行软件，灵活度高，电路不可配置</li>\n<li>ASIC：专用，几乎没有灵活度，电路部可配置</li>\n<li>FPGA：现场可编程门阵列，通用，灵活度中等，电路可配置，内部通过查表实现逻辑</li>\n</ul>\n<p><img src=\"/img/%E6%95%B0%E7%94%B5%E5%9F%BA%E7%A1%80_img/image-20220216193519626.png\" alt=\"image-20220216193519626\"></p>\n<h2 id=\"HDL–硬件描述语言\"><a href=\"#HDL–硬件描述语言\" class=\"headerlink\" title=\"HDL–硬件描述语言\"></a>HDL–硬件描述语言</h2><ul>\n<li>Verilog描述的是电路</li>\n<li>区别于软件语言：软件语言描述的是过程，最终被转换为指令执行</li>\n</ul>\n<h3 id=\"Verilog–模块\"><a href=\"#Verilog–模块\" class=\"headerlink\" title=\"Verilog–模块\"></a>Verilog–模块</h3><p><img src=\"/img/%E6%95%B0%E7%94%B5%E5%9F%BA%E7%A1%80_img/image-20220216193800986.png\" alt=\"image-20220216193800986\"></p>\n<h3 id=\"Verilog–语法\"><a href=\"#Verilog–语法\" class=\"headerlink\" title=\"Verilog–语法\"></a>Verilog–语法</h3><ul>\n<li>语句：以分号结束，忽略空格和换行</li>\n<li>标识符：类似C，可以含有$</li>\n<li>注释：类似C</li>\n<li>代码块：和软件语言均<strong>不一样</strong>，使用”begin”和”end”</li>\n</ul>\n<h3 id=\"Verilog–常量\"><a href=\"#Verilog–常量\" class=\"headerlink\" title=\"Verilog–常量\"></a>Verilog–常量</h3><ul>\n<li>Verilog有四种常量：0、1、不定态x、高阻态z</li>\n</ul>\n<p><img src=\"/img/%E6%95%B0%E7%94%B5%E5%9F%BA%E7%A1%80_img/image-20220216194015216.png\" alt=\"image-20220216194015216\"></p>\n<h3 id=\"Verilog–变量\"><a href=\"#Verilog–变量\" class=\"headerlink\" title=\"Verilog–变量\"></a>Verilog–变量</h3><ul>\n<li>Wire型变量：用来表示电路中的连线或者组合逻辑，应当被驱动（必须和别人接到一起），不赋值默认高阻态</li>\n<li>Reg型变量：需要被明确的赋值，可以用于驱动别人（不用和别人接到一起），不赋值默认为不定态</li>\n</ul>\n<h3 id=\"Verilog–运算法\"><a href=\"#Verilog–运算法\" class=\"headerlink\" title=\"Verilog–运算法\"></a>Verilog–运算法</h3><ul>\n<li>算术运算：类似C</li>\n<li>逻辑运算：类似C</li>\n<li>位运算：类似C，注意同或~^符号</li>\n<li>缩位运算：对操作数的各位依次进行运算</li>\n<li>关系运算：类似C</li>\n<li>移位运算：类似C，注意{}运算符，表示将两个或多个信号的某些位链接起来</li>\n</ul>\n<pre class=\"line-numbers language-verilog\" data-language=\"verilog\"><code class=\"language-verilog\">o1<span class=\"token operator\">={</span>b<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">}</span>\n<span class=\"token comment\">//输出长度是len(b)+len(a)+4</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"Verilog–always块\"><a href=\"#Verilog–always块\" class=\"headerlink\" title=\"Verilog–always块\"></a>Verilog–always块</h3><pre class=\"line-numbers language-verilog\" data-language=\"verilog\"><code class=\"language-verilog\"><span class=\"token important\">always @</span><span class=\"token punctuation\">(</span>sensitive_exp<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">begin</span>\n<span class=\"token comment\">//options</span>\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>敏感表达式sensitive_exp：当敏感表达式的内容改变时，执行下面的语句</li>\n<li>@(*)表示全部敏感</li>\n<li>@(posedge exp)和@(negedge exp)表示上升沿敏感和下降沿敏感</li>\n</ul>\n<h3 id=\"Verilog–赋值语句\"><a href=\"#Verilog–赋值语句\" class=\"headerlink\" title=\"Verilog–赋值语句\"></a>Verilog–赋值语句</h3><h4 id=\"持续赋值语句\"><a href=\"#持续赋值语句\" class=\"headerlink\" title=\"持续赋值语句\"></a>持续赋值语句</h4><pre class=\"line-numbers language-verilog\" data-language=\"verilog\"><code class=\"language-verilog\">wirea<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">assign</span> a <span class=\"token operator\">=</span> b <span class=\"token operator\">&amp;</span> c<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li>只能用于wire型变量</li>\n<li>不能用于always模块</li>\n</ul>\n<h4 id=\"过程赋值语句\"><a href=\"#过程赋值语句\" class=\"headerlink\" title=\"过程赋值语句\"></a>过程赋值语句</h4><pre class=\"line-numbers language-verilog\" data-language=\"verilog\"><code class=\"language-verilog\"><span class=\"token keyword\">reg</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token important\">always @</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">posedge</span> clk<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">begin</span>\n\ta <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>只能用于reg型变量</li>\n<li>只能用于always模块</li>\n</ul>\n<h4 id=\"阻塞赋值和非阻塞赋值\"><a href=\"#阻塞赋值和非阻塞赋值\" class=\"headerlink\" title=\"阻塞赋值和非阻塞赋值\"></a>阻塞赋值和非阻塞赋值</h4><ul>\n<li>阻塞赋值：前面一个语句执行完才执行下一个</li>\n<li>非阻塞赋值：当clk上升沿到来时，两个语句同时执行</li>\n</ul>\n<pre class=\"line-numbers language-verilog\" data-language=\"verilog\"><code class=\"language-verilog\"><span class=\"token comment\">//阻塞</span>\n<span class=\"token important\">always @</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">posedge</span> clk<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">begin</span>\n\tb <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n\tc <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">end</span>\n<span class=\"token comment\">//非阻塞</span>\n<span class=\"token important\">always @</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">posedge</span> clk<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">begin</span>\n\tb <span class=\"token operator\">&lt;=</span> a<span class=\"token punctuation\">;</span>\n\tc <span class=\"token operator\">&lt;=</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>注意</strong>：变量只能在一个always语句中被赋值（无法用一根线将两个D触发器的输出接到一起）</p>\n<h3 id=\"Verilog–条件语句\"><a href=\"#Verilog–条件语句\" class=\"headerlink\" title=\"Verilog–条件语句\"></a>Verilog–条件语句</h3><ul>\n<li>if else语句</li>\n<li>case语句：可以将切片(数组)写到条件里，可以存在?写法，还有casez和casex的写法（即当条件某些位出现z/x时不予考虑）</li>\n</ul>\n","text":" 逻辑的代数表示 逻辑运算：与或非、异或、同或 布尔表达式：包含布尔变量和布尔运算的 布尔函数：布尔映射 真值表：一张表把布尔函数的输入输出列出来 基本定律：德摩根律、互补律、消去律、重叠、对偶（01互换，+*互换，等式成立） 格雷码：使得相邻之间的状态转换只有一位数字翻转（为了...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"HWS/2022","slug":"HWS-2022","count":2,"path":"api/categories/HWS-2022.json"}],"tags":[{"name":"HWS","slug":"HWS","count":9,"path":"api/tags/HWS.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%80%BB%E8%BE%91%E7%9A%84%E4%BB%A3%E6%95%B0%E8%A1%A8%E7%A4%BA\"><span class=\"toc-text\">逻辑的代数表示</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%BB%84%E5%90%88%E9%80%BB%E8%BE%91\"><span class=\"toc-text\">组合逻辑</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%84%E5%90%88%E7%94%B5%E8%B7%AF%E4%B8%AD%E7%9A%84%E5%BB%B6%E6%97%B6%E4%B8%8E%E5%86%92%E9%99%A9\"><span class=\"toc-text\">组合电路中的延时与冒险</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%81%E7%9A%84%E7%BB%84%E5%90%88%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF\"><span class=\"toc-text\">常见的组合逻辑电路</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%97%B6%E5%BA%8F%E9%80%BB%E8%BE%91\"><span class=\"toc-text\">时序逻辑</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA\"><span class=\"toc-text\">有限状态机</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E6%97%B6%E5%BA%8F%E5%8D%95%E5%85%83%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">基本时序单元结构</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B8%E5%9E%8B%E7%9A%84%E6%97%B6%E5%BA%8F%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF\"><span class=\"toc-text\">典型的时序逻辑电路</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Verilog%E5%92%8CFPGA%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">Verilog和FPGA基础</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%81%E7%A1%AC%E4%BB%B6\"><span class=\"toc-text\">常见硬件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#HDL%E2%80%93%E7%A1%AC%E4%BB%B6%E6%8F%8F%E8%BF%B0%E8%AF%AD%E8%A8%80\"><span class=\"toc-text\">HDL–硬件描述语言</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Verilog%E2%80%93%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">Verilog–模块</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Verilog%E2%80%93%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">Verilog–语法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Verilog%E2%80%93%E5%B8%B8%E9%87%8F\"><span class=\"toc-text\">Verilog–常量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Verilog%E2%80%93%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">Verilog–变量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Verilog%E2%80%93%E8%BF%90%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">Verilog–运算法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Verilog%E2%80%93always%E5%9D%97\"><span class=\"toc-text\">Verilog–always块</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Verilog%E2%80%93%E8%B5%8B%E5%80%BC%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">Verilog–赋值语句</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8C%81%E7%BB%AD%E8%B5%8B%E5%80%BC%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">持续赋值语句</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%87%E7%A8%8B%E8%B5%8B%E5%80%BC%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">过程赋值语句</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%98%BB%E5%A1%9E%E8%B5%8B%E5%80%BC%E5%92%8C%E9%9D%9E%E9%98%BB%E5%A1%9E%E8%B5%8B%E5%80%BC\"><span class=\"toc-text\">阻塞赋值和非阻塞赋值</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Verilog%E2%80%93%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">Verilog–条件语句</span></a></li></ol></li></ol></li></ol>","author":{"name":"S1eepy","slug":"blog-author","avatar":"/img/touxiang.jpg","link":"/","description":"Someone who is learning how to take life seriously","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Coppersmith攻击","uid":"0a24457c29f40101285969c51d4343fa","slug":"CTF/crypto/Coppersmith攻击","date":"2022-02-21T07:04:12.000Z","updated":"2022-03-04T15:38:30.809Z","comments":true,"path":"api/articles/CTF/crypto/Coppersmith攻击.json","keywords":null,"cover":"/img/7.jpg","text":" Coppersmith定理证明不会，定理如下 针对一个e阶的mod n多项式f(x)，若有一个根小于，就可以在O(log n)以内求出这些根 可以应用于rsa的攻击，例如e=3，且明文有的bit已知，用该算法就可以求出明文 针对RSA攻击分类参考https://lazzzaro...","link":"","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[{"name":"CTF/CRYPTO","slug":"CTF-CRYPTO","count":5,"path":"api/categories/CTF-CRYPTO.json"}],"tags":[{"name":"CTF CRYPTO","slug":"CTF-CRYPTO","count":5,"path":"api/tags/CTF-CRYPTO.json"}],"author":{"name":"S1eepy","slug":"blog-author","avatar":"/img/touxiang.jpg","link":"/","description":"Someone who is learning how to take life seriously","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"硬件接口入门","uid":"2e26753d18f40c4232753f44ace2ff64","slug":"HWS/2022/硬件接口入门","date":"2022-02-16T02:25:41.000Z","updated":"2022-02-16T03:36:48.800Z","comments":true,"path":"api/articles/HWS/2022/硬件接口入门.json","keywords":null,"cover":"/img/5.jpg","text":" 硬件接口入门参考：https://demo.hedgedoc.org/s/sHig2ekuQ# UARTUART口是指一种物理接口形式（硬件接口） UART是异步，全双工串口总线。有两根线，一根TXD用于发送，一根RXD用于接收。UART的串行数据传输不需要使用时钟信号来同步传...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"HWS/2022","slug":"HWS-2022","count":2,"path":"api/categories/HWS-2022.json"}],"tags":[{"name":"HWS","slug":"HWS","count":9,"path":"api/tags/HWS.json"}],"author":{"name":"S1eepy","slug":"blog-author","avatar":"/img/touxiang.jpg","link":"/","description":"Someone who is learning how to take life seriously","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}