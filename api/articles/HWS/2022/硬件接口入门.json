{"title":"硬件接口入门","uid":"2e26753d18f40c4232753f44ace2ff64","slug":"HWS/2022/硬件接口入门","date":"2022-02-16T02:25:41.000Z","updated":"2022-02-16T03:36:48.800Z","comments":true,"path":"api/articles/HWS/2022/硬件接口入门.json","keywords":null,"cover":"/img/5.jpg","content":"<span id=\"more\"></span>\n\n<h1 id=\"硬件接口入门\"><a href=\"#硬件接口入门\" class=\"headerlink\" title=\"硬件接口入门\"></a>硬件接口入门</h1><p>参考：<a href=\"https://demo.hedgedoc.org/s/sHig2ekuQ#\">https://demo.hedgedoc.org/s/sHig2ekuQ#</a></p>\n<h2 id=\"UART\"><a href=\"#UART\" class=\"headerlink\" title=\"UART\"></a>UART</h2><p>UART口是指一种物理接口形式（硬件接口）</p>\n<p><img src=\"/img/%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3%E5%85%A5%E9%97%A8_img/image-20220216102828373.png\" alt=\"image-20220216102828373\"></p>\n<p>UART是异步，全双工串口总线。有两根线，一根TXD用于发送，一根RXD用于接收。UART的串行数据传输不需要使用时钟信号来同步传输，而是依赖于发送设备和接受设备之间预定义的配置，即UART协议。</p>\n<p><img src=\"/img/%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3%E5%85%A5%E9%97%A8_img/image-20220216103039905.png\" alt=\"image-20220216103039905\"></p>\n<ul>\n<li>起始位：表示数据传输开始，电平逻辑为0</li>\n<li>数据位：可能数据位数有5位、6位、7位、8位、9位，表示要传输的数据比特数，一般为8位</li>\n<li>奇偶校验位：用于对接受到的数据进行校验，保证数据传输正确性</li>\n<li>停止位：表示一帧数据的结束，电平逻辑为1</li>\n</ul>\n<p>如果用通用IO口模拟UART总线，则需要一个输入口一个输出口</p>\n<h3 id=\"例题serial-logs\"><a href=\"#例题serial-logs\" class=\"headerlink\" title=\"例题serial_logs\"></a>例题serial_logs</h3><p>首先看通道中只有一个活动的信号，且信号大部分是在某个固定频率上工作的，没有时钟信号，再结合题目serial_logs，猜测是UART协议中的一根TX/RX线，因此添加分析逻辑，设置波特率为115200</p>\n<p><img src=\"/img/%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3%E5%85%A5%E9%97%A8_img/image-20220216104501782.png\" alt=\"image-20220216104501782\"></p>\n<p>紧接着就能在控制台看到一堆logs，但是到最后出现了个error，然后剩下的就是乱码，跳过去看一下</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[ERR] Noise detected in channel. Swithcing baud to backup value\n\\xEE\\x1E\\xEC~\\x9E\\x10\\xF....<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>之后的波特率发生了变化，因此帧读错了，这跳到出错的位置那里，频率是74.294kHz，把波特率重设置一下，就能在控制台最后看到flag</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[LOG] Connection from CHTB{wh47?!_f23qu3ncy_h0pp1n9_1n_4_532141_p2070c01?!!!52}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>PS：看到ctftime上有个大哥爆破到波特率为72000直接出了flag，看呆了</p>\n<h2 id=\"I2C\"><a href=\"#I2C\" class=\"headerlink\" title=\"I2C\"></a>I2C</h2><p>I2C总线是一种同步、半双工半双向的两线式串口总线。它由两条总线组成：串行时钟线SCL和串行数据线SDA。</p>\n<ul>\n<li>SCL：负责产生同步时钟脉冲</li>\n<li>SDA：负责在设备之间传输串行数据</li>\n</ul>\n<p>该总线可以将多个I2C设备连接到该系统上，连接到I2C总线上的设备既可以作为主设备，也可以作为从设备。</p>\n<p><img src=\"/img/%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3%E5%85%A5%E9%97%A8_img/image-20220216105734687.png\" alt=\"image-20220216105734687\"></p>\n<p>主设备负责控制通信，通过对数据传输进行初始化，来发送数据并产生所需要的同步时钟脉冲。从设备则是等待来自主设备的命令，并响应命令接收。</p>\n<p>主设备和从设备都可以作为发送设备或者接受设备。不过时钟信号始终由主设备产生。</p>\n<h3 id=\"例题compromised\"><a href=\"#例题compromised\" class=\"headerlink\" title=\"例题compromised\"></a>例题compromised</h3><p>有两个通道的数据，添加一个I2C分析器，将Channel0设为SDA，将Channel1设为SCL，然后就可以在右侧Data处看到flag格式的字符串，但是还不是flag，先将其作为txt文本导出，大概格式如下</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">0.974250660000000,0,4,s,Write,ACK\n0.999460300000000,0,4,e,Write,ACK\n1.024669880000000,0,4,t,Write,ACK\n1.049884460000000,0,4,_,Write,ACK\n1.075094020000000,0,4,m,Write,ACK\n1.100303660000000,0,4,a,Write,ACK\n1.100553640000000,0,COMMA,C,Write,ACK\n1.125763220000000,0,4,x,Write,ACK\n1.125998200000000,0,COMMA,H,Write,ACK\n1.151217780000000,0,4,_,Write,ACK\n1.176442340000000,0,4,l,Write,ACK\n1.176682260000000,0,COMMA,T,Write,ACK\n1.201906820000000,0,4,i,Write,ACK\n1.227131420000000,0,4,m,Write,ACK\n1.227366420000000,0,COMMA,B,Write,ACK\n1.227616340000000,0,COMMA,{,Write,ACK\n1.252820980000000,0,4,i,Write,ACK<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看出在包含真正flag的字段行都含有COMMA这个字符串，写个脚本将其提取出来即可</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'res.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span>\nflag <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n<span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> f<span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token string\">'COMMA'</span> <span class=\"token keyword\">in</span> line<span class=\"token punctuation\">:</span>\n\t\ts <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span>\n\t\tflag <span class=\"token operator\">+=</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span>\nf<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># CHTB{nu11_732m1n47025_c4n_8234k_4_532141_5y573m!@52)#@%}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"SPI\"><a href=\"#SPI\" class=\"headerlink\" title=\"SPI\"></a>SPI</h2><p>SPI总线是同步、全双工双向的四线式串行接口总线。它是由单个主设备，多个从设备构成的系统。在系统中，只要任意时刻有一个主设备被激活，就可以存在多个主SPI设备。</p>\n<p><img src=\"/img/%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3%E5%85%A5%E9%97%A8_img/image-20220216112854378.png\" alt=\"image-20220216112854378\"></p>\n<p>为了实现通信，SPI总共有四条信号线，分别是</p>\n<ul>\n<li>主设备出，从设备入（MOSI）：主设备向从设备传输数据的信号线，也称从设备输入（SI/SDI）</li>\n<li>主设备入，从设备出（MISO）：由从设备向主设备传输数据的信号线，也称从设备输出（SO/SDO）</li>\n<li>串行时钟（SCLK）：传输时钟信号的信号线</li>\n<li>从设备选择（SS）：用于选择从设备的信号线</li>\n</ul>\n<h3 id=\"例题off-the-gird\"><a href=\"#例题off-the-gird\" class=\"headerlink\" title=\"例题off_the_gird\"></a>例题off_the_gird</h3><p>这题给了张图，根据图上的数据输入和时钟信号及使能位调整信道，Channel0为MOSI，Channel1为Clock，Channel2为Enable，在右侧控制台看到一堆字节数组，然后字节数组转字符串即可得到flag</p>\n<h2 id=\"UART、SPI、I2C比较\"><a href=\"#UART、SPI、I2C比较\" class=\"headerlink\" title=\"UART、SPI、I2C比较\"></a>UART、SPI、I2C比较</h2><ul>\n<li>I2C线更少、比UART、SPI更强大，但是技术上更麻烦，因为I2C需要双向IO支持，且使用上拉电阻，抗干扰能力弱，一般用于统一板卡上芯片之间的通信，较少用于远距离通信</li>\n<li>SPI实现较简单，UART需要固定的波特率，即量数据位之间的间隔要相等，而SPI有时钟则不需要</li>\n<li>I2C速度比SPI慢一点，协议比SPI复杂，但是连线也比标准SPI少</li>\n<li>UART一帧可以传输5/6/7/8位，I2C必须是8位，I2C和SPI都是从最高位开始传</li>\n<li>SPI用片选信号选择从机，I2C用地址选择从机</li>\n</ul>\n","text":" 硬件接口入门参考：https://demo.hedgedoc.org/s/sHig2ekuQ# UARTUART口是指一种物理接口形式（硬件接口） UART是异步，全双工串口总线。有两根线，一根TXD用于发送，一根RXD用于接收。UART的串行数据传输不需要使用时钟信号来同步传...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"HWS/2022","slug":"HWS-2022","count":2,"path":"api/categories/HWS-2022.json"}],"tags":[{"name":"HWS","slug":"HWS","count":9,"path":"api/tags/HWS.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3%E5%85%A5%E9%97%A8\"><span class=\"toc-text\">硬件接口入门</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#UART\"><span class=\"toc-text\">UART</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BE%8B%E9%A2%98serial-logs\"><span class=\"toc-text\">例题serial_logs</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#I2C\"><span class=\"toc-text\">I2C</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BE%8B%E9%A2%98compromised\"><span class=\"toc-text\">例题compromised</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SPI\"><span class=\"toc-text\">SPI</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BE%8B%E9%A2%98off-the-gird\"><span class=\"toc-text\">例题off_the_gird</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#UART%E3%80%81SPI%E3%80%81I2C%E6%AF%94%E8%BE%83\"><span class=\"toc-text\">UART、SPI、I2C比较</span></a></li></ol></li></ol>","author":{"name":"S1eepy","slug":"blog-author","avatar":"/img/touxiang.jpg","link":"/","description":"Someone who is learning how to take life seriously","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"数电基础","uid":"0162baa68121de3e2c10c96d5835ca7a","slug":"HWS/2022/数电基础","date":"2022-02-18T13:13:44.000Z","updated":"2022-02-18T13:17:38.410Z","comments":true,"path":"api/articles/HWS/2022/数电基础.json","keywords":null,"cover":"/img/6.jpg","text":" 逻辑的代数表示 逻辑运算：与或非、异或、同或 布尔表达式：包含布尔变量和布尔运算的 布尔函数：布尔映射 真值表：一张表把布尔函数的输入输出列出来 基本定律：德摩根律、互补律、消去律、重叠、对偶（01互换，+*互换，等式成立） 格雷码：使得相邻之间的状态转换只有一位数字翻转（为了...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"HWS/2022","slug":"HWS-2022","count":2,"path":"api/categories/HWS-2022.json"}],"tags":[{"name":"HWS","slug":"HWS","count":9,"path":"api/tags/HWS.json"}],"author":{"name":"S1eepy","slug":"blog-author","avatar":"/img/touxiang.jpg","link":"/","description":"Someone who is learning how to take life seriously","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"pwnable刷题","uid":"728bc0e237c3a4cf5b22aa0f745046c8","slug":"CTF/pwn/pwnable刷题","date":"2022-02-09T09:35:27.000Z","updated":"2022-02-09T10:30:05.163Z","comments":true,"path":"api/articles/CTF/pwn/pwnable刷题.json","keywords":null,"cover":"/img/4.jpg","text":" pwnable刷题记录记录一下pwnable刷题的详细过程 start一道很适合入门的题目，简单的ret2shellcode，从中可以引申出函数调用过程栈的变化。 首先检查一下保护，啥也没开 然后拖到ida里打开就俩函数，一个start一个exit，分析start函数 .tex...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"CTF/PWN","slug":"CTF-PWN","count":7,"path":"api/categories/CTF-PWN.json"}],"tags":[{"name":"CTF PWN pwnable","slug":"CTF-PWN-pwnable","count":1,"path":"api/tags/CTF-PWN-pwnable.json"}],"author":{"name":"S1eepy","slug":"blog-author","avatar":"/img/touxiang.jpg","link":"/","description":"Someone who is learning how to take life seriously","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}