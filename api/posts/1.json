{"total":14,"pageSize":12,"pageCount":2,"data":[{"title":"Hexo主题数学公式渲染","uid":"6cbb80cb79ca010921d708bc73e8460f","slug":"blog/Hexo主题数学公式渲染","date":"2022-01-23T08:21:01.000Z","updated":"2022-01-23T08:26:03.675Z","comments":true,"path":"api/articles/blog/Hexo主题数学公式渲染.json","cover":"/img/27.jpg","text":" Hexo主题数学公式渲染之前搭博客的时候内嵌数学公式一直没渲染出来，一大堆$$符号放着十分的呆，很多博客让卸了装好多包最后也没解决，这次放一下我的解决办法 首先hexo的框架应该都是支持mathjax的，只不过不同主题开启方式不同 首先需要安装majax插件 npm insta...","link":"","photos":[],"count_time":{"symbolsCount":214,"symbolsTime":"1 mins."},"categories":[{"name":"BLOG","slug":"BLOG","count":1,"path":"api/categories/BLOG.json"}],"tags":[{"name":"BLOG","slug":"BLOG","count":1,"path":"api/tags/BLOG.json"}],"author":{"name":"S1eepy","slug":"blog-author","avatar":"/img/touxiang.jpg","link":"/","description":"Someone who is learning how to take life seriously","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"随机数之LCG","uid":"03ede3be90a360cf1806307a54bd7512","slug":"CTF/crypto/随机数之LCG","date":"2022-01-23T07:02:13.000Z","updated":"2022-01-23T08:15:14.386Z","comments":true,"path":"api/articles/CTF/crypto/随机数之LCG.json","cover":"/img/26.jpg","text":" 随机数之LCG上课的时候好像学过LCG这个东西，但是遇到的时候想都想不起来..所以还是写点东西记下来 定义和推广线性同余法(LCG)是一种伪随机数生成的方法，生成方法如下其中定义了三个整数，乘数a、增量b、模数m 推广公式根据定义推出三个数的求法如下另一个很重要的公式单独列出来...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"CTF/CRYPTO","slug":"CTF-CRYPTO","count":1,"path":"api/categories/CTF-CRYPTO.json"}],"tags":[{"name":"CTF CRYPTO","slug":"CTF-CRYPTO","count":1,"path":"api/tags/CTF-CRYPTO.json"}],"author":{"name":"S1eepy","slug":"blog-author","avatar":"/img/touxiang.jpg","link":"/","description":"Someone who is learning how to take life seriously","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"DNS隧道文献调研","uid":"31531518f5b44460dcc99773a48a9a22","slug":"Research/Paper/DNS隧道文献调研","date":"2022-01-22T03:50:03.000Z","updated":"2022-01-22T03:51:34.761Z","comments":true,"path":"api/articles/Research/Paper/DNS隧道文献调研.json","cover":"/img/25.jpg","text":" DNS隧道文献调研前两天学习了点DNS隧道的知识，这两天就调研了一下DNS隧道的检测相关手段，主要涉及人工智能和流量检测的 低速DNS隐蔽信道通信检测研究与实现研究现状检测思路主要分为两类 基于通信过程特征：深度学习（基于字节的卷积神经网络，基于长短期记忆的循环神经网络，Sta...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"Research/Paper","slug":"Research-Paper","count":1,"path":"api/categories/Research-Paper.json"}],"tags":[{"name":"Research Paper","slug":"Research-Paper","count":1,"path":"api/tags/Research-Paper.json"}],"author":{"name":"S1eepy","slug":"blog-author","avatar":"/img/touxiang.jpg","link":"/","description":"Someone who is learning how to take life seriously","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"初探DNS隧道","uid":"c96bc3988ac1e521f9bca4fae6eb257f","slug":"CTF/web/初探DNS隧道","date":"2022-01-20T04:34:19.000Z","updated":"2022-01-20T06:33:24.304Z","comments":true,"path":"api/articles/CTF/web/初探DNS隧道.json","cover":"/img/24.jpg","text":" 初探DNS隧道本文主要探究一下DNS协议，隐蔽信道实现原理，以及一些相关工具等 从DNS协议说起域名系统(Domain Name System，DNS)是一种将域名和IP地址进行互相映射的一个分布式数据库，使用户能方便的直接通过域名访问互联网服务，而不需要去记一大串IP。通过主...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"CTF/WEB","slug":"CTF-WEB","count":2,"path":"api/categories/CTF-WEB.json"}],"tags":[{"name":"CTF WEB","slug":"CTF-WEB","count":2,"path":"api/tags/CTF-WEB.json"}],"author":{"name":"S1eepy","slug":"blog-author","avatar":"/img/touxiang.jpg","link":"/","description":"Someone who is learning how to take life seriously","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"栈溢出进阶","uid":"4773296421a8fb9509157a21ee5da267","slug":"CTF/pwn/栈溢出进阶","date":"2022-01-20T01:17:23.000Z","updated":"2022-01-21T01:51:58.291Z","comments":true,"path":"api/articles/CTF/pwn/栈溢出进阶.json","cover":"/img/23.jpg","text":" 栈溢出进阶stack smash在glibc-2.23可行，后续版本不可行了 在报错时会泄漏出文件名，原码中的__fortify_fail里有个__libc_massgae将命令行输入参数作为调试结果输出了，因此可以用这个命令行的参数进行格式化字符串输出，将我们想要的libc地...","link":"","photos":[],"count_time":{"symbolsCount":337,"symbolsTime":"1 mins."},"categories":[{"name":"CTF/PWN","slug":"CTF-PWN","count":6,"path":"api/categories/CTF-PWN.json"}],"tags":[{"name":"CTF PWN","slug":"CTF-PWN","count":6,"path":"api/tags/CTF-PWN.json"}],"author":{"name":"S1eepy","slug":"blog-author","avatar":"/img/touxiang.jpg","link":"/","description":"Someone who is learning how to take life seriously","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"ret2xx","uid":"e75c21f70c678b134f6a0bde8c339180","slug":"CTF/pwn/ret2xx","date":"2022-01-18T11:55:26.000Z","updated":"2022-01-20T04:45:01.559Z","comments":true,"path":"api/articles/CTF/pwn/ret2xx.json","cover":"/img/21.jpg","text":" ret2xx什么是ret2xx泛指ret2text，ret2shellcode，ret2syscall，ret2libc，ret2csu，其中ret2是return to的谐音，可以使用利用eip指针的方法来获取权限 ROPReturn Oriented Programming...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"CTF/PWN","slug":"CTF-PWN","count":6,"path":"api/categories/CTF-PWN.json"}],"tags":[{"name":"CTF PWN","slug":"CTF-PWN","count":6,"path":"api/tags/CTF-PWN.json"}],"author":{"name":"S1eepy","slug":"blog-author","avatar":"/img/touxiang.jpg","link":"/","description":"Someone who is learning how to take life seriously","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"canary_pie绕过","uid":"5cbed18fc0178c7e2f7d933895162e2e","slug":"CTF/pwn/canary_pie绕过","date":"2022-01-18T11:53:50.000Z","updated":"2022-01-19T07:55:48.512Z","comments":true,"path":"api/articles/CTF/pwn/canary_pie绕过.json","cover":"/img/22.jpg","text":" Canary_pie绕过Canary机制介绍canary是一种用来防护栈溢出的保护机制，原理是先在函数的入口处，从fs/gs寄存器中取出一个4字节或者8字节的值存到栈上，当程序结束后再检查这个值是否和存进去的值一致 Canary bypass只要保持canary值不变，依旧可以...","link":"","photos":[],"count_time":{"symbolsCount":928,"symbolsTime":"1 mins."},"categories":[{"name":"CTF/PWN","slug":"CTF-PWN","count":6,"path":"api/categories/CTF-PWN.json"}],"tags":[{"name":"CTF PWN","slug":"CTF-PWN","count":6,"path":"api/tags/CTF-PWN.json"}],"author":{"name":"S1eepy","slug":"blog-author","avatar":"/img/touxiang.jpg","link":"/","description":"Someone who is learning how to take life seriously","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"RE-BUU","uid":"ce6a61e69eea25b26a44cdf9f84d23a7","slug":"CTF/reverse/RE-BUU","date":"2022-01-18T07:17:52.000Z","updated":"2022-01-22T08:42:24.375Z","comments":true,"path":"api/articles/CTF/reverse/RE-BUU.json","cover":"/img/18.jpg","text":" BUUCTF-Reverse刷题记录新年快乐一个upx壳，怎么看出来的还不知道，等回头学会了再补 直接upx -d去壳，扔进idaF5看代码就是比较输入字符串和”HappyNewYear!”，因此这个字符串就是flag xor主函数是逻辑如下，遍历输入字符串，将当前位与前一位异...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"CTF/REVERSE","slug":"CTF-REVERSE","count":2,"path":"api/categories/CTF-REVERSE.json"}],"tags":[{"name":"CTF REVERSE","slug":"CTF-REVERSE","count":2,"path":"api/tags/CTF-REVERSE.json"}],"author":{"name":"S1eepy","slug":"blog-author","avatar":"/img/touxiang.jpg","link":"/","description":"Someone who is learning how to take life seriously","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"shellcode","uid":"33178a053863ba406bb965eb7a776aab","slug":"CTF/pwn/shellcode","date":"2022-01-18T04:55:28.000Z","updated":"2022-01-19T07:54:48.505Z","comments":true,"path":"api/articles/CTF/pwn/shellcode.json","cover":"/img/20.jpg","text":" shellcode什么是shellcode软件漏洞利用过程中使用一小段机器代码 启动shell进行交互 可能存在的问题shellcode只允许输入十几个字节 无法调用系统函数(不知道system的地址) 解决触发中断（0x80或者syscall） 如何编写shellcode32...","link":"","photos":[],"count_time":{"symbolsCount":896,"symbolsTime":"1 mins."},"categories":[{"name":"CTF/PWN","slug":"CTF-PWN","count":6,"path":"api/categories/CTF-PWN.json"}],"tags":[{"name":"CTF PWN","slug":"CTF-PWN","count":6,"path":"api/tags/CTF-PWN.json"}],"author":{"name":"S1eepy","slug":"blog-author","avatar":"/img/touxiang.jpg","link":"/","description":"Someone who is learning how to take life seriously","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"栈溢出基础","uid":"b0e5183f9443ee80e444d03488f07c6f","slug":"CTF/pwn/栈溢出基础","date":"2022-01-18T04:54:11.000Z","updated":"2022-01-20T04:43:51.407Z","comments":true,"path":"api/articles/CTF/pwn/栈溢出基础.json","cover":"/img/19.jpg","text":" 栈溢出基础C语言函数调用栈栈是程序运行时一块连续的内存区域，用来保存函数运行时的状态信息，包括函数的局部变量等 当发生函数调用时，调用函数(caller)的状态被保存在栈内，被调用函数(callee)的状态被压入调用栈的栈顶 函数调用结束时栈顶的函数(callee)状态被弹出，...","link":"","photos":[],"count_time":{"symbolsCount":781,"symbolsTime":"1 mins."},"categories":[{"name":"CTF/PWN","slug":"CTF-PWN","count":6,"path":"api/categories/CTF-PWN.json"}],"tags":[{"name":"CTF PWN","slug":"CTF-PWN","count":6,"path":"api/tags/CTF-PWN.json"}],"author":{"name":"S1eepy","slug":"blog-author","avatar":"/img/touxiang.jpg","link":"/","description":"Someone who is learning how to take life seriously","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Learn_RE","uid":"a100591a1cf0e28185d19ee6ce40ac1f","slug":"CTF/reverse/Learn_RE","date":"2022-01-18T04:52:25.000Z","updated":"2022-01-19T07:57:04.630Z","comments":true,"path":"api/articles/CTF/reverse/Learn_RE.json","cover":"/img/17.jpg","text":" RE学习笔记记录一下寒假期间学习RE的知识 ","link":"","photos":[],"count_time":{"symbolsCount":24,"symbolsTime":"1 mins."},"categories":[{"name":"CTF/REVERSE","slug":"CTF-REVERSE","count":2,"path":"api/categories/CTF-REVERSE.json"}],"tags":[{"name":"CTF REVERSE","slug":"CTF-REVERSE","count":2,"path":"api/tags/CTF-REVERSE.json"}],"author":{"name":"S1eepy","slug":"blog-author","avatar":"/img/touxiang.jpg","link":"/","description":"Someone who is learning how to take life seriously","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Learn_PWN","uid":"0c0a9c1a2db47172b0f7b7bd30e860a1","slug":"CTF/pwn/Learn_PWN","date":"2022-01-18T04:51:06.000Z","updated":"2022-01-19T07:57:22.555Z","comments":true,"path":"api/articles/CTF/pwn/Learn_PWN.json","cover":"/img/16.jpg","text":"PWN学习笔记记录一下放大三寒假期间学习PWN的知识 ","link":"","photos":[],"count_time":{"symbolsCount":27,"symbolsTime":"1 mins."},"categories":[{"name":"CTF/PWN","slug":"CTF-PWN","count":6,"path":"api/categories/CTF-PWN.json"}],"tags":[{"name":"CTF PWN","slug":"CTF-PWN","count":6,"path":"api/tags/CTF-PWN.json"}],"author":{"name":"S1eepy","slug":"blog-author","avatar":"/img/touxiang.jpg","link":"/","description":"Someone who is learning how to take life seriously","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}]}